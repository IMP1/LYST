Αα  Alpha       Νν  Nu
Ββ  Beta        Ξξ  Xi
Γγ  Gamma       Οο  Omicron
Δδ  Delta       Ππ  Pi
Εε  Epsilon     Ρρ  Rho
Ζζ  Zeta        Σσς Sigma
Ηη  Eta         Ττ  Tau
Θθ  Theta       Υυ  Upsilon
Ιι  Iota        Φφ  Phi
Κκ  Kappa       Χχ  Chi
Λλ  Lambda      Ψψ  Psi
Μμ  Mu          Ωω  Omega


# LYST (Lower Your Score Today)

## Ideas
τ     : foldl (collection, function) -> collection
ψ     : filter (collection, function) -> collection
γ     : duplicate (value, n) -> collection
ε     : unpack (collection) -> (value, ...)
ζ     : length (collection) -> int
?     : max (collection) -> value


≠     : not equal
=     : equal

⤠     : interval from 1 (max) [1, max] -> collection
⤞     : interval from 0 (max) [0, max] -> collection

$N    : Nth argv (0 indexed) of $ collection.




ψ : Reduce
    (collection, function) -> collection
    returns a collection from the first parameter where each element satisfies the function

## Truthyness

'True': numbers > 0, non-empty strings, non-empty collections

## Implicit

(current scalar)     = args[0]
(current collection) = args

## Examples

### Pyramid of Asterisks.

'' RUBY:
1.upto($*[0].to_i){|i|puts"*"*i}

ξμθαπ'*υι
   α            Take input (N)
  θ             Creates an 'empty' list of size N
 μ              Maps each element of the above to the following value
     '*         Literal '*' character
    π           Multiplied by
        ι       Get the current iterator through the loop (the map in this case)
       υ        Incremented by one
ξ               Join the resultant collection with newlines
                Implicit Output

### Truth Machine

'' RUBY
p a=$*[0];loop{p a}if a>0

φαοα
 α              Gets input
Φ               If it is greater than 0 
  ο             Creates infinte loop of the following:
   α            Original input (now confirmed to be > 0 (1))
                Else returns the falsey value (0)
                Implicit output of either infinte loop of 1s, or one 0.

### Marquee

'' RUBY
w=" "*(n=$*[1].to_i)+$*[0];w.size.times{|i|puts w[i,n]}

ξμσπ' ρβηαβαηιaβα
         α          Get input
        η           Get the tail elements (all but the first)
       β            Get the first element of the tail (the supplied number)
      ρ             Save this value in the variable `a`, and return it
    '               The literal character ' ' (space)
   π                Multiply this character by the supplied number
          βα        The first input (supplied string)
  σ                 Add the spacing to the supplied input
 μ                  Go through this string and map each input to 
               βα   The first input (supplied string)
            η       A substring 
             ι      From the current iterator counter
              a     to the size provided
ξ                   Join with newlines
                    Implicit output

### Blinking 12:00

'' RUBY
%w{12:00 --:--}.cycle{|a|puts a;sleep 0.5}

μο{--:-- 12:00}λτ.5κ
  {--:-- 12:00}             List of the two strings
 ο                          Loop it forever
μ                           Map all values to the following
               λ            A new thunk
                   κ        The current value
                τ.5         Returned after .5 of a second
                            Implicit output


### Longest Chain of 1s in binary representation

'' RUBY
->b{("%b%b"%[b,~b]).scan(/1+/).max.size}




## Functions

μ : Map 
    (collection, function) -> collection
    returns a collection of values equal to applying the function to each element of the original collection.

θ : Init
    (int) -> collection
    returns a collection of size equal to the input, where each element is defaulted to something (null? 0? doesn't matter yet).

α : Input
    () -> value
    returns either the collection of all inputs, or the single input value.

ω : Output
    (value) -> value
    prints the value to STDOUT.
    (collection) -> collection
    iterates through the collection, printing each to STDOUT.

π : Product
    (value, value) -> value
    multiplies the two values and returns the result.
    (collection) -> value
    multiplies the values of the collection and returns the result.

σ : Sum
    (value, value) -> value
    adds the two values and returns the result.
    (collection) -> value
    adds the values of the collection and returns the result.

ξ : Join
    (value, collection) -> value
    joins the collecton with the value and returns the result.
    (collection) -> value
    joins the collection with newlines (or ", "?) and returns the result.

υ : Increment
    (value) -> value
    returns the value incremented by 1.
    (collection) -> collection
    return the collection where each element has been incremented by 1.

ι : Iterator
    () -> value
    returns the current index of the inner-most loop currently being executed.

κ : Current
    () -> value
    returns the current value of the inner-most loop currently being executed.

δ : Difference
    (value, value) -> value
    returns the difference between the two values.
    (collection) -> collection
    returns a collection of 'delta's, differences between two elements in the original collection.

ο : Cycle
    (value) -> collection
    Returns an infinite collection containing the value
    (collection) -> collection
    Returns an infinite loop of the collection

φ : If
    (value, function) -> value
    returns the result of the function if value is truthy*. Otherwise returns value.
    (collection, function) -> value
    returns the result of the function if value is truthy*. Otherwise returns value.

β : Head
    (collection) -> value
    Returns the first value in the collection.
    (int, collection) -> value
    returns the Nth value in the collection, where N is the first paramater.

η : Tail
    (collection) -> collection
    Returns all but the first element in the supplied collection.
    (int, collection) -> collection
    Returns the sub-collection starting at the given index.
    (int, int, collection) -> collection
    Returns the sub-collection starting at the first argument, and going upto (exclusive) the second argument.

ρ : Push
    (value) -> value
    Saves the value in the next avaiable value (using the letters from the english alphabet)

τ : Pause
    (value, value) -> value
    pauses for the number of seconds specified by the first argument, and then returns the second argument.

λ : Thunk
    (function) -> thunk
    wraps the value returned by the function in a thunk.

## Literals

'  : Character
    (value) -> string
    returns the literal string of the character following the '.

"" : String
    (character, ...) -> string

[] : Collection of values, space separated
    (value, ...) -> collection

{} : Collection of Strings, space separated
    (string, ...) -> collection
